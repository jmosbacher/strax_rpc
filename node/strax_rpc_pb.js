/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.straxrpc.BoolColumn', null, global);
goog.exportSymbol('proto.straxrpc.ColumnInfo', null, global);
goog.exportSymbol('proto.straxrpc.DataColumn', null, global);
goog.exportSymbol('proto.straxrpc.Float32Column', null, global);
goog.exportSymbol('proto.straxrpc.Float64Column', null, global);
goog.exportSymbol('proto.straxrpc.Int32Column', null, global);
goog.exportSymbol('proto.straxrpc.Int64Column', null, global);
goog.exportSymbol('proto.straxrpc.PluginInfo', null, global);
goog.exportSymbol('proto.straxrpc.SearchPattern', null, global);
goog.exportSymbol('proto.straxrpc.StringColumn', null, global);
goog.exportSymbol('proto.straxrpc.TableInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.SearchPattern = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.straxrpc.SearchPattern, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.SearchPattern.displayName = 'proto.straxrpc.SearchPattern';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.SearchPattern.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.SearchPattern.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.SearchPattern} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.SearchPattern.toObject = function(includeInstance, msg) {
  var f, obj = {
    pattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    maxMatches: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.SearchPattern}
 */
proto.straxrpc.SearchPattern.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.SearchPattern;
  return proto.straxrpc.SearchPattern.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.SearchPattern} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.SearchPattern}
 */
proto.straxrpc.SearchPattern.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxMatches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.SearchPattern.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.SearchPattern.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.SearchPattern} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.SearchPattern.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaxMatches();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string pattern = 1;
 * @return {string}
 */
proto.straxrpc.SearchPattern.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.straxrpc.SearchPattern.prototype.setPattern = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 max_matches = 2;
 * @return {number}
 */
proto.straxrpc.SearchPattern.prototype.getMaxMatches = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.straxrpc.SearchPattern.prototype.setMaxMatches = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.TableInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.straxrpc.TableInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.TableInfo.displayName = 'proto.straxrpc.TableInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.TableInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.TableInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.TableInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.TableInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    runId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.TableInfo}
 */
proto.straxrpc.TableInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.TableInfo;
  return proto.straxrpc.TableInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.TableInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.TableInfo}
 */
proto.straxrpc.TableInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.TableInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.TableInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.TableInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.TableInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRunId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.straxrpc.TableInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.straxrpc.TableInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string run_id = 2;
 * @return {string}
 */
proto.straxrpc.TableInfo.prototype.getRunId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.straxrpc.TableInfo.prototype.setRunId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.PluginInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.straxrpc.PluginInfo.repeatedFields_, null);
};
goog.inherits(proto.straxrpc.PluginInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.PluginInfo.displayName = 'proto.straxrpc.PluginInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.straxrpc.PluginInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.PluginInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.PluginInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.PluginInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.PluginInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    className: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.straxrpc.ColumnInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.PluginInfo}
 */
proto.straxrpc.PluginInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.PluginInfo;
  return proto.straxrpc.PluginInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.PluginInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.PluginInfo}
 */
proto.straxrpc.PluginInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 3:
      var value = new proto.straxrpc.ColumnInfo;
      reader.readMessage(value,proto.straxrpc.ColumnInfo.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.PluginInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.PluginInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.PluginInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.PluginInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClassName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.straxrpc.ColumnInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.straxrpc.PluginInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.straxrpc.PluginInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string class_name = 2;
 * @return {string}
 */
proto.straxrpc.PluginInfo.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.straxrpc.PluginInfo.prototype.setClassName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated ColumnInfo columns = 3;
 * @return {!Array.<!proto.straxrpc.ColumnInfo>}
 */
proto.straxrpc.PluginInfo.prototype.getColumnsList = function() {
  return /** @type{!Array.<!proto.straxrpc.ColumnInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.straxrpc.ColumnInfo, 3));
};


/** @param {!Array.<!proto.straxrpc.ColumnInfo>} value */
proto.straxrpc.PluginInfo.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.straxrpc.ColumnInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.straxrpc.ColumnInfo}
 */
proto.straxrpc.PluginInfo.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.straxrpc.ColumnInfo, opt_index);
};


proto.straxrpc.PluginInfo.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.ColumnInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.straxrpc.ColumnInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.ColumnInfo.displayName = 'proto.straxrpc.ColumnInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.ColumnInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.ColumnInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.ColumnInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.ColumnInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    plugin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dtype: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.ColumnInfo}
 */
proto.straxrpc.ColumnInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.ColumnInfo;
  return proto.straxrpc.ColumnInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.ColumnInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.ColumnInfo}
 */
proto.straxrpc.ColumnInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlugin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.ColumnInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.ColumnInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.ColumnInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.ColumnInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlugin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDtype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.straxrpc.ColumnInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.straxrpc.ColumnInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string data_name = 2;
 * @return {string}
 */
proto.straxrpc.ColumnInfo.prototype.getDataName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.straxrpc.ColumnInfo.prototype.setDataName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string plugin = 3;
 * @return {string}
 */
proto.straxrpc.ColumnInfo.prototype.getPlugin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.straxrpc.ColumnInfo.prototype.setPlugin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string comment = 4;
 * @return {string}
 */
proto.straxrpc.ColumnInfo.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.straxrpc.ColumnInfo.prototype.setComment = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string dtype = 5;
 * @return {string}
 */
proto.straxrpc.ColumnInfo.prototype.getDtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.straxrpc.ColumnInfo.prototype.setDtype = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.Int32Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.straxrpc.Int32Column.repeatedFields_, null);
};
goog.inherits(proto.straxrpc.Int32Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.Int32Column.displayName = 'proto.straxrpc.Int32Column';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.straxrpc.Int32Column.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.Int32Column.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.Int32Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.Int32Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Int32Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.Int32Column}
 */
proto.straxrpc.Int32Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.Int32Column;
  return proto.straxrpc.Int32Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.Int32Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.Int32Column}
 */
proto.straxrpc.Int32Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIndexList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.Int32Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.Int32Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.Int32Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Int32Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated uint32 index = 1;
 * @return {!Array.<number>}
 */
proto.straxrpc.Int32Column.prototype.getIndexList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Int32Column.prototype.setIndexList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Int32Column.prototype.addIndex = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.straxrpc.Int32Column.prototype.clearIndexList = function() {
  this.setIndexList([]);
};


/**
 * repeated int32 values = 2;
 * @return {!Array.<number>}
 */
proto.straxrpc.Int32Column.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Int32Column.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Int32Column.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.straxrpc.Int32Column.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.Int64Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.straxrpc.Int64Column.repeatedFields_, null);
};
goog.inherits(proto.straxrpc.Int64Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.Int64Column.displayName = 'proto.straxrpc.Int64Column';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.straxrpc.Int64Column.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.Int64Column.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.Int64Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.Int64Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Int64Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.Int64Column}
 */
proto.straxrpc.Int64Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.Int64Column;
  return proto.straxrpc.Int64Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.Int64Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.Int64Column}
 */
proto.straxrpc.Int64Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIndexList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.Int64Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.Int64Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.Int64Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Int64Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
};


/**
 * repeated uint32 index = 1;
 * @return {!Array.<number>}
 */
proto.straxrpc.Int64Column.prototype.getIndexList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Int64Column.prototype.setIndexList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Int64Column.prototype.addIndex = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.straxrpc.Int64Column.prototype.clearIndexList = function() {
  this.setIndexList([]);
};


/**
 * repeated int64 values = 2;
 * @return {!Array.<number>}
 */
proto.straxrpc.Int64Column.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Int64Column.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Int64Column.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.straxrpc.Int64Column.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.BoolColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.straxrpc.BoolColumn.repeatedFields_, null);
};
goog.inherits(proto.straxrpc.BoolColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.BoolColumn.displayName = 'proto.straxrpc.BoolColumn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.straxrpc.BoolColumn.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.BoolColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.BoolColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.BoolColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.BoolColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.BoolColumn}
 */
proto.straxrpc.BoolColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.BoolColumn;
  return proto.straxrpc.BoolColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.BoolColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.BoolColumn}
 */
proto.straxrpc.BoolColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIndexList(value);
      break;
    case 2:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.BoolColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.BoolColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.BoolColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.BoolColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedBool(
      2,
      f
    );
  }
};


/**
 * repeated uint32 index = 1;
 * @return {!Array.<number>}
 */
proto.straxrpc.BoolColumn.prototype.getIndexList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.straxrpc.BoolColumn.prototype.setIndexList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.BoolColumn.prototype.addIndex = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.straxrpc.BoolColumn.prototype.clearIndexList = function() {
  this.setIndexList([]);
};


/**
 * repeated bool values = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array.<boolean>}
 */
proto.straxrpc.BoolColumn.prototype.getValuesList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<boolean>} value */
proto.straxrpc.BoolColumn.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.straxrpc.BoolColumn.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.straxrpc.BoolColumn.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.Float32Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.straxrpc.Float32Column.repeatedFields_, null);
};
goog.inherits(proto.straxrpc.Float32Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.Float32Column.displayName = 'proto.straxrpc.Float32Column';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.straxrpc.Float32Column.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.Float32Column.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.Float32Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.Float32Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Float32Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.Float32Column}
 */
proto.straxrpc.Float32Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.Float32Column;
  return proto.straxrpc.Float32Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.Float32Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.Float32Column}
 */
proto.straxrpc.Float32Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIndexList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.Float32Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.Float32Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.Float32Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Float32Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * repeated uint32 index = 1;
 * @return {!Array.<number>}
 */
proto.straxrpc.Float32Column.prototype.getIndexList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Float32Column.prototype.setIndexList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Float32Column.prototype.addIndex = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.straxrpc.Float32Column.prototype.clearIndexList = function() {
  this.setIndexList([]);
};


/**
 * repeated float values = 2;
 * @return {!Array.<number>}
 */
proto.straxrpc.Float32Column.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Float32Column.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Float32Column.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.straxrpc.Float32Column.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.Float64Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.straxrpc.Float64Column.repeatedFields_, null);
};
goog.inherits(proto.straxrpc.Float64Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.Float64Column.displayName = 'proto.straxrpc.Float64Column';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.straxrpc.Float64Column.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.Float64Column.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.Float64Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.Float64Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Float64Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.Float64Column}
 */
proto.straxrpc.Float64Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.Float64Column;
  return proto.straxrpc.Float64Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.Float64Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.Float64Column}
 */
proto.straxrpc.Float64Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIndexList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.Float64Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.Float64Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.Float64Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.Float64Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
};


/**
 * repeated uint32 index = 1;
 * @return {!Array.<number>}
 */
proto.straxrpc.Float64Column.prototype.getIndexList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Float64Column.prototype.setIndexList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Float64Column.prototype.addIndex = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.straxrpc.Float64Column.prototype.clearIndexList = function() {
  this.setIndexList([]);
};


/**
 * repeated double values = 2;
 * @return {!Array.<number>}
 */
proto.straxrpc.Float64Column.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.straxrpc.Float64Column.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.Float64Column.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.straxrpc.Float64Column.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.StringColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.straxrpc.StringColumn.repeatedFields_, null);
};
goog.inherits(proto.straxrpc.StringColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.StringColumn.displayName = 'proto.straxrpc.StringColumn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.straxrpc.StringColumn.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.StringColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.StringColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.StringColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.StringColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexList: jspb.Message.getRepeatedField(msg, 1),
    valuesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.StringColumn}
 */
proto.straxrpc.StringColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.StringColumn;
  return proto.straxrpc.StringColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.StringColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.StringColumn}
 */
proto.straxrpc.StringColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setIndexList(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.StringColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.StringColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.StringColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.StringColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated uint32 index = 1;
 * @return {!Array.<number>}
 */
proto.straxrpc.StringColumn.prototype.getIndexList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.straxrpc.StringColumn.prototype.setIndexList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.straxrpc.StringColumn.prototype.addIndex = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.straxrpc.StringColumn.prototype.clearIndexList = function() {
  this.setIndexList([]);
};


/**
 * repeated string values = 2;
 * @return {!Array.<string>}
 */
proto.straxrpc.StringColumn.prototype.getValuesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.straxrpc.StringColumn.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.straxrpc.StringColumn.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.straxrpc.StringColumn.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.straxrpc.DataColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.straxrpc.DataColumn.oneofGroups_);
};
goog.inherits(proto.straxrpc.DataColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.straxrpc.DataColumn.displayName = 'proto.straxrpc.DataColumn';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.straxrpc.DataColumn.oneofGroups_ = [[2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.straxrpc.DataColumn.DataCase = {
  DATA_NOT_SET: 0,
  INT32: 2,
  INT64: 3,
  FLOAT32: 4,
  FLOAT64: 5,
  STRING: 6,
  BOOL: 7,
  OBJECT: 8
};

/**
 * @return {proto.straxrpc.DataColumn.DataCase}
 */
proto.straxrpc.DataColumn.prototype.getDataCase = function() {
  return /** @type {proto.straxrpc.DataColumn.DataCase} */(jspb.Message.computeOneofCase(this, proto.straxrpc.DataColumn.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.straxrpc.DataColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.straxrpc.DataColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.straxrpc.DataColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.DataColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.straxrpc.ColumnInfo.toObject(includeInstance, f),
    int32: (f = msg.getInt32()) && proto.straxrpc.Int32Column.toObject(includeInstance, f),
    int64: (f = msg.getInt64()) && proto.straxrpc.Int64Column.toObject(includeInstance, f),
    float32: (f = msg.getFloat32()) && proto.straxrpc.Float32Column.toObject(includeInstance, f),
    float64: (f = msg.getFloat64()) && proto.straxrpc.Float64Column.toObject(includeInstance, f),
    string: (f = msg.getString()) && proto.straxrpc.StringColumn.toObject(includeInstance, f),
    bool: (f = msg.getBool()) && proto.straxrpc.BoolColumn.toObject(includeInstance, f),
    object: (f = msg.getObject()) && proto.straxrpc.StringColumn.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.straxrpc.DataColumn}
 */
proto.straxrpc.DataColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.straxrpc.DataColumn;
  return proto.straxrpc.DataColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.straxrpc.DataColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.straxrpc.DataColumn}
 */
proto.straxrpc.DataColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.straxrpc.ColumnInfo;
      reader.readMessage(value,proto.straxrpc.ColumnInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = new proto.straxrpc.Int32Column;
      reader.readMessage(value,proto.straxrpc.Int32Column.deserializeBinaryFromReader);
      msg.setInt32(value);
      break;
    case 3:
      var value = new proto.straxrpc.Int64Column;
      reader.readMessage(value,proto.straxrpc.Int64Column.deserializeBinaryFromReader);
      msg.setInt64(value);
      break;
    case 4:
      var value = new proto.straxrpc.Float32Column;
      reader.readMessage(value,proto.straxrpc.Float32Column.deserializeBinaryFromReader);
      msg.setFloat32(value);
      break;
    case 5:
      var value = new proto.straxrpc.Float64Column;
      reader.readMessage(value,proto.straxrpc.Float64Column.deserializeBinaryFromReader);
      msg.setFloat64(value);
      break;
    case 6:
      var value = new proto.straxrpc.StringColumn;
      reader.readMessage(value,proto.straxrpc.StringColumn.deserializeBinaryFromReader);
      msg.setString(value);
      break;
    case 7:
      var value = new proto.straxrpc.BoolColumn;
      reader.readMessage(value,proto.straxrpc.BoolColumn.deserializeBinaryFromReader);
      msg.setBool(value);
      break;
    case 8:
      var value = new proto.straxrpc.StringColumn;
      reader.readMessage(value,proto.straxrpc.StringColumn.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.straxrpc.DataColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.straxrpc.DataColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.straxrpc.DataColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.straxrpc.DataColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.straxrpc.ColumnInfo.serializeBinaryToWriter
    );
  }
  f = message.getInt32();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.straxrpc.Int32Column.serializeBinaryToWriter
    );
  }
  f = message.getInt64();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.straxrpc.Int64Column.serializeBinaryToWriter
    );
  }
  f = message.getFloat32();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.straxrpc.Float32Column.serializeBinaryToWriter
    );
  }
  f = message.getFloat64();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.straxrpc.Float64Column.serializeBinaryToWriter
    );
  }
  f = message.getString();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.straxrpc.StringColumn.serializeBinaryToWriter
    );
  }
  f = message.getBool();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.straxrpc.BoolColumn.serializeBinaryToWriter
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.straxrpc.StringColumn.serializeBinaryToWriter
    );
  }
};


/**
 * optional ColumnInfo info = 1;
 * @return {?proto.straxrpc.ColumnInfo}
 */
proto.straxrpc.DataColumn.prototype.getInfo = function() {
  return /** @type{?proto.straxrpc.ColumnInfo} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.ColumnInfo, 1));
};


/** @param {?proto.straxrpc.ColumnInfo|undefined} value */
proto.straxrpc.DataColumn.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.straxrpc.DataColumn.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Int32Column int32 = 2;
 * @return {?proto.straxrpc.Int32Column}
 */
proto.straxrpc.DataColumn.prototype.getInt32 = function() {
  return /** @type{?proto.straxrpc.Int32Column} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.Int32Column, 2));
};


/** @param {?proto.straxrpc.Int32Column|undefined} value */
proto.straxrpc.DataColumn.prototype.setInt32 = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.straxrpc.DataColumn.oneofGroups_[0], value);
};


proto.straxrpc.DataColumn.prototype.clearInt32 = function() {
  this.setInt32(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasInt32 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Int64Column int64 = 3;
 * @return {?proto.straxrpc.Int64Column}
 */
proto.straxrpc.DataColumn.prototype.getInt64 = function() {
  return /** @type{?proto.straxrpc.Int64Column} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.Int64Column, 3));
};


/** @param {?proto.straxrpc.Int64Column|undefined} value */
proto.straxrpc.DataColumn.prototype.setInt64 = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.straxrpc.DataColumn.oneofGroups_[0], value);
};


proto.straxrpc.DataColumn.prototype.clearInt64 = function() {
  this.setInt64(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasInt64 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Float32Column float32 = 4;
 * @return {?proto.straxrpc.Float32Column}
 */
proto.straxrpc.DataColumn.prototype.getFloat32 = function() {
  return /** @type{?proto.straxrpc.Float32Column} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.Float32Column, 4));
};


/** @param {?proto.straxrpc.Float32Column|undefined} value */
proto.straxrpc.DataColumn.prototype.setFloat32 = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.straxrpc.DataColumn.oneofGroups_[0], value);
};


proto.straxrpc.DataColumn.prototype.clearFloat32 = function() {
  this.setFloat32(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasFloat32 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Float64Column float64 = 5;
 * @return {?proto.straxrpc.Float64Column}
 */
proto.straxrpc.DataColumn.prototype.getFloat64 = function() {
  return /** @type{?proto.straxrpc.Float64Column} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.Float64Column, 5));
};


/** @param {?proto.straxrpc.Float64Column|undefined} value */
proto.straxrpc.DataColumn.prototype.setFloat64 = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.straxrpc.DataColumn.oneofGroups_[0], value);
};


proto.straxrpc.DataColumn.prototype.clearFloat64 = function() {
  this.setFloat64(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasFloat64 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StringColumn string = 6;
 * @return {?proto.straxrpc.StringColumn}
 */
proto.straxrpc.DataColumn.prototype.getString = function() {
  return /** @type{?proto.straxrpc.StringColumn} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.StringColumn, 6));
};


/** @param {?proto.straxrpc.StringColumn|undefined} value */
proto.straxrpc.DataColumn.prototype.setString = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.straxrpc.DataColumn.oneofGroups_[0], value);
};


proto.straxrpc.DataColumn.prototype.clearString = function() {
  this.setString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasString = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BoolColumn bool = 7;
 * @return {?proto.straxrpc.BoolColumn}
 */
proto.straxrpc.DataColumn.prototype.getBool = function() {
  return /** @type{?proto.straxrpc.BoolColumn} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.BoolColumn, 7));
};


/** @param {?proto.straxrpc.BoolColumn|undefined} value */
proto.straxrpc.DataColumn.prototype.setBool = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.straxrpc.DataColumn.oneofGroups_[0], value);
};


proto.straxrpc.DataColumn.prototype.clearBool = function() {
  this.setBool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasBool = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional StringColumn object = 8;
 * @return {?proto.straxrpc.StringColumn}
 */
proto.straxrpc.DataColumn.prototype.getObject = function() {
  return /** @type{?proto.straxrpc.StringColumn} */ (
    jspb.Message.getWrapperField(this, proto.straxrpc.StringColumn, 8));
};


/** @param {?proto.straxrpc.StringColumn|undefined} value */
proto.straxrpc.DataColumn.prototype.setObject = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.straxrpc.DataColumn.oneofGroups_[0], value);
};


proto.straxrpc.DataColumn.prototype.clearObject = function() {
  this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.straxrpc.DataColumn.prototype.hasObject = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.straxrpc);
